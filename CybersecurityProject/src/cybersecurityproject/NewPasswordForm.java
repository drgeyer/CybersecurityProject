/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cybersecurityproject;

import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
/**
 *
 * @author 7051665
 */
public class NewPasswordForm extends JPanel {
    Password newPassword = new Password();
    Password verifyPassword = new Password();
    int nPassAttempts = 1;
    final int MISS = 40;
    MainWindow parent = (MainWindow)this.getParent();
    /**
     * Creates new form NewPasswordForm
     */
    public NewPasswordForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        passwordTextBox1 = new cybersecurityproject.PasswordTextBox();
        SubmitButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        passwordTextBox2 = new cybersecurityproject.PasswordTextBox();
        jLabel2 = new javax.swing.JLabel();
        MessageLabel = new javax.swing.JLabel();

        SubmitButton.setText("Submit");
        SubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Enter Password");

        jLabel2.setText("Verify Password");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 253, Short.MAX_VALUE))
                    .addComponent(passwordTextBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(passwordTextBox2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(MessageLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SubmitButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordTextBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordTextBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SubmitButton)
                    .addComponent(MessageLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void SubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitButtonActionPerformed
        // TODO add your handling code here:
        //First thing to do is close up the TimeToNext event on the final PasswordEvent
        //in the array

        newPassword = (Password)this.passwordTextBox1.createdPassword.clone();
        newPassword.final_password = this.passwordTextBox1.getText();
        verifyPassword = (Password) this.passwordTextBox2.createdPassword.clone();
        verifyPassword.final_password = this.passwordTextBox2.getText();
        MessageLabel.setText("");
        
        int outcome = PasswordCompare();
        if(outcome == 0)
        {
            try {
                CompileAndWritePassword();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(NewPasswordForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(NewPasswordForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            MessageLabel.setText("Passwords Match!");
            MessageLabel.setForeground(Color.GREEN);
        }
        else if (outcome == 1)
        {
            //invalid password entered
            MessageLabel.setText("Passwords are different lengths.");
            MessageLabel.setForeground(Color.RED);
        }
        else if (outcome == 2)
        {
            MessageLabel.setText("Passwords have different events.");
            MessageLabel.setForeground(Color.RED);            
        }
        else if (outcome == 3)
        {
            MessageLabel.setText("Passwords have different timings.");
            MessageLabel.setForeground(Color.RED);
        }
        else if (outcome == 4)
        {
            MessageLabel.setText("Passwords are different strings.");
            MessageLabel.setForeground(Color.RED);    
        }
        //clear everything
        this.passwordTextBox1.ResetPasswordData();
        this.passwordTextBox2.ResetPasswordData();
        
    }//GEN-LAST:event_SubmitButtonActionPerformed

    //this function makes sure newPassword = verifyPassword
    private int PasswordCompare()
    {
        PasswordComparator comp = new PasswordComparator();
        return comp.ComparePasswords(newPassword, verifyPassword);
    }
    
    private void CompileAndWritePassword() throws FileNotFoundException, IOException
    {
        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileNameExtensionFilter("Password Files", "pwd"));
        int user_choice = fc.showSaveDialog(this);
        
        if(user_choice == JFileChooser.APPROVE_OPTION)
        {
            File fout = fc.getSelectedFile();
            FileWriter fwr = new FileWriter(fout);
            fwr.write(newPassword.final_password + " ");
            for(PasswordEvent ev : newPassword.events)
            {
                WritePasswordEvent(fwr, ev);
            }
            try {
                fwr.close();
            } catch (IOException ex) {
                Logger.getLogger(NewPasswordForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
        private void WritePasswordEvent(FileWriter fwr, PasswordEvent ev)
    {
        try {
            fwr.write(Integer.toString(ev.KeyLocation) + " ");
            fwr.write(Integer.toString(ev.KeyPressed) + " ");
            fwr.write(Integer.toString(ev.KeyCode)+ " ");
            fwr.write(Integer.toString(ev.TimeSincePrev) + " ");
            fwr.write(Integer.toString(ev.TimeToNext) + " ");
            fwr.write(Integer.toString(ev.TimeSinceFirst) + " ");
        } catch (IOException ex) {
            Logger.getLogger(NewPasswordForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        
        
    }
    
    public void FireSubmitButton()
    {
        SubmitButtonActionPerformed(null);
    }
    
    public void InitialFocus()
    {
        passwordTextBox1.requestFocusInWindow();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel MessageLabel;
    private javax.swing.JButton SubmitButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private cybersecurityproject.PasswordTextBox passwordTextBox1;
    private cybersecurityproject.PasswordTextBox passwordTextBox2;
    // End of variables declaration//GEN-END:variables
}
